#!/usr/bin/perl
#
# Passpoint Provisioning Tools
#  Simple CGI script for Passpoint profile provisioning
#  Target: Windows 10+
# 
# Usage:
#  - Customize the configuration part below.
#  - Put this script on a web server as a CGI program.
#    (Please refer to the HTTP server's manual for configuring CGI.)
#  - Access the script using the ms-settings:wifi-provisioning?uri= scheme.
#    <a href="ms-settings:wifi-provisioning?uri=https://<path_to_script>/passpoint-win.config"> ... </a>
# Notes:
#  - Windows requires a profile signed by an EV certificate.
#  - The key and certificate files for signing need to be accessible
#    from the process group such as "www". (chgrp & chmod o+r)
#  - This script may not work in a restricted website such as the one
#    protected by the Basic Authentication. A non-browser process requires
#    access. (see also the helper ppwin-helper.cgi)
# References:
#  https://docs.microsoft.com/en-us/windows-hardware/drivers/mobilebroadband/account-provisioning
#  https://docs.microsoft.com/en-us/windows-hardware/drivers/mobilebroadband/update-the-hotspot-authentication-sample
#  https://docs.microsoft.com/en-us/windows/win32/nativewifi/wlan-profileschema-elements
#  https://docs.microsoft.com/en-us/windows/uwp/launch-resume/launch-settings-app
#
# 20220729 Hideaki Goto (Cityroam/eduroam)
# 20220731 Hideaki Goto (Cityroam/eduroam)
# 20220812 Hideaki Goto (Cityroam/eduroam)
#

$use_xmlsec1 = 'true';	# use external command xmlsec1 to sign the profile
#$use_xmlsec1 = 'false';

use CGI;
use Digest::SHA1;
use MIME::Base64;
use XML::Compile::C14N;
use XML::Compile::C14N::Util ':c14n';
use XML::LibXML;
use Crypt::CBC;
use Crypt::OpenSSL::RSA;
use Redis;

my $q = CGI->new();
my $redis = Redis->new(server => 'localhost:6379') or die;

if ( defined $q->param('ukey') ){
	my $key = $q->param('ukey');
	$webuser = $redis->get($key);
	if ( ! $redis->exists($key) ){
		$webuser="$ENV{'REMOTE_USER'}";
	}
}
else{
	$webuser="$ENV{'REMOTE_USER'}";
}

# Here $webuser contains the web user ID.


#---- Configuration part ----

#### Set ID/PW and realm here. ####
#$userID = 'name@example.com';
#$passwd = 'somePassword';

# External code that sets $userID and $passwd
require '../etc/getuserinfo.pl';
if ( &getuserinfo( $webuser ) ){ exit(1); }

$uname = $anonID = $userID;
$anonID =~ s/^.*@/anonymous@/;	# outer identity

# include common settings
require '../etc/pp-common.cfg';


#---- Profile composition part ----
# (no need to edit below, hopefully)

$xml_SSID = '';
if ( $SSID ne '' ){
	$xml_SSID = << "EOS";
      <SSIDConfig>
        <SSID>
          <name>$SSID</name>
        </SSID>
      </SSIDConfig>
EOS
}

$RCOI =~ s/\s*//g;
$xml_RCOI = '';
if ( $RCOI ne '' ){
	$RCOI = lc $RCOI;
	my @ois = split(/,/, $RCOI);
	$xml_RCOI = "        <RoamingConsortium>\n";
	for my $oi (@ois){
		$xml_RCOI .= "          <OUI>$oi</OUI>\n";
	}
	$xml_RCOI .= "        </RoamingConsortium>\n";
}


$xml = <<"EOS";
<CarrierProvisioning xmlns="http://www.microsoft.com/networking/CarrierControl/v1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Global>
    <CarrierId>{$CarrierId}</CarrierId>
    <SubscriberId>$SubscriberId</SubscriberId>
  </Global>
  <WLANProfiles>
    <WLANProfile xmlns="http://www.microsoft.com/networking/CarrierControl/WLAN/v1">
      <name>$friendlyName</name>
${xml_SSID}      <Hotspot2>
        <DomainName>$HomeDomain</DomainName>
        <NAIRealm>
          <name>$NAIrealm</name>
        </NAIRealm>
${xml_RCOI}      </Hotspot2>
      <MSM>
        <security>
          <authEncryption>
            <authentication>WPA2</authentication>
            <encryption>AES</encryption>
            <useOneX>true</useOneX>
          </authEncryption>
          <OneX xmlns="http://www.microsoft.com/networking/OneX/v1">
            <authMode>user</authMode>
            <EAPConfig>
              <EapHostConfig xmlns="http://www.microsoft.com/provisioning/EapHostConfig">
                <EapMethod>
                  <Type xmlns="http://www.microsoft.com/provisioning/EapCommon">21</Type>
                  <VendorId xmlns="http://www.microsoft.com/provisioning/EapCommon">0</VendorId>
                  <VendorType xmlns="http://www.microsoft.com/provisioning/EapCommon">0</VendorType>
                  <AuthorId xmlns="http://www.microsoft.com/provisioning/EapCommon">311</AuthorId>
                </EapMethod>
                <Config>
                  <EapTtls xmlns="http://www.microsoft.com/provisioning/EapTtlsConnectionPropertiesV1">
                    <ServerValidation>
                      <ServerNames>$AAAFQDN</ServerNames>
                      <TrustedRootCAHash>$TrustedRootCAHash</TrustedRootCAHash>
                      <DisablePrompt>false</DisablePrompt>
                    </ServerValidation>
                    <Phase2Authentication>
                      <MSCHAPAuthentication/>
                    </Phase2Authentication>
                    <Phase1Identity>
                      <IdentityPrivacy>true</IdentityPrivacy>
                      <AnonymousIdentity>$anonID</AnonymousIdentity>
                    </Phase1Identity>
                  </EapTtls>
                </Config>
              </EapHostConfig>
            </EAPConfig>
          </OneX>
          <EapHostUserCredentials xmlns="http://www.microsoft.com/provisioning/EapHostUserCredentials" xmlns:baseEap="http://www.microsoft.com/provisioning/BaseEapMethodUserCredentials" xmlns:eapCommon="http://www.microsoft.com/provisioning/EapCommon">
            <EapMethod>
              <eapCommon:Type>21</eapCommon:Type>
              <eapCommon:AuthorId>311</eapCommon:AuthorId>
            </EapMethod>
            <Credentials>
              <EapTtls xmlns="http://www.microsoft.com/provisioning/EapTtlsUserPropertiesV1">
                <Username>$userID</Username>
                <Password>$passwd</Password>
              </EapTtls>
            </Credentials>
          </EapHostUserCredentials>
        </security>
      </MSM>
    </WLANProfile>
  </WLANProfiles>
</CarrierProvisioning>
EOS


# Signing by xmlsec1 command.

if ( $use_xmlsec1 !~ /false/i ){
	chomp $xml;
	$xml =~ s/<\/CarrierProvisioning>//;
	$xml .= <<"EOS";
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#"><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue></DigestValue></Reference></SignedInfo><SignatureValue></SignatureValue><KeyInfo><X509Data><X509Certificate></X509Certificate></X509Data></KeyInfo></Signature></CarrierProvisioning>
EOS
	my $cmdopt = "";
	if ( $CAfile_win ne '' ){
		$cmdopt .= "--trusted-pem $CAfile_win";
	}

print <<EOS;
Content-Type: text/xml
Content-Disposition: attachment; filename="passpoint.xml"

EOS

	open(fh, "| xmlsec1 --sign --pkcs12 $signercertpfx --pwd \"$pfxpasswd\" $cmdopt -");
	print fh $xml;
	close(fh);

	exit(0);
}


# Perl version of signing below.

my $c14n   = XML::Compile::C14N->new(type => '1.0');

chomp $xml;
my $xml1 = $xml;
$xml1 =~ s/<\/CarrierProvisioning>//;
my $xml2 = '</CarrierProvisioning>';

$parser = XML::LibXML->new();
$dom = $parser->parse_string($xml);

my $cano = $c14n->normalize(C14N_v10_NO_COMM, $dom);

#print $cano."\n";

$digest = Digest::SHA1::sha1($cano);
$dgstb64 = encode_base64($digest);
chomp $dgstb64;

#print $dgstb64;

# command line example:
# openssl dgst -sha1 -sign private-key.pem si_cano_c14n.xml|base64

# See: https://www.di-mgt.com.au/xmldsig.html
#  Form the canonicalized <SignedInfo> element. 
#  Note the xmlns attribute which we include here, 
#  but not in the final document. 
#  This is propagated down from the parent <Signature> element. 

my $si = <<"EOS";
<CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>$dgstb64</DigestValue></Reference></SignedInfo>
EOS

$si =~ s/\s*//;
$si =~ s/\s*$//;
$si =~ s/\s*\d?\n\s*//g;
# also chomp-ed

$si_out = '<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#">'.$si;
$si = '<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'.$si;

$dom = $parser->parse_string($si);
$si_cano = $c14n->normalize(C14N_v10_NO_COMM, $dom);

#print "\n".$si_cano."\n\n";

my $privkey = '';
open(my $fh, '<', $signerkey);
while(<$fh>){$privkey .= $_}
close($fh);
my $rsa_privkey = Crypt::OpenSSL::RSA->new_private_key($privkey);
my $sign = $rsa_privkey->sign($si_cano);

$sigval = encode_base64($sign, "");
chomp $sigval;

#print $sigval."\n";


# read signer cert.

my $cert1 = '';
if ($signercert ne ''){
	open(my $fh, '<', $signercert) or break;
	while(<$fh>){$cert1 .= $_}
	close($fh);
}
if ($CAfile_win ne ''){
	open(my $fh, '<', $CAfile_win) or break;
	while(<$fh>){$cert1 .= $_}
	close($fh);
}
$cert1 =~ s/\-\-\-\-\-BEGIN\s+CERTIFICATE\-\-\-\-\-\n/<X509Certificate>/g;
$cert1 =~ s/\n\-\-\-\-\-END\s+CERTIFICATE\-\-\-\-\-\n/<\/X509Certificate>/g;
chomp $cert1;
#$cert1 .= "</X509Certificate>\n";

#print $cert1;


# form Signature block

$signature = <<"EOS";
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#">$si_out<SignatureValue>$sigval</SignatureValue><KeyInfo><X509Data>$cert1</X509Data></KeyInfo></Signature>
EOS
chomp $signature;

print <<"EOS";
Content-Type: text/xml
Content-Disposition: attachment; filename="passpoint.xml"

EOS

print "<?xml version=\"1.0\"?>\n";
print "$xml1$signature$xml2\n";

exit(0);
